name: "CI"

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Note: if this changes, also changes the hardcoded image tag later.
# FIXME: unfortunately we can't use an environment variable when specifying
# an image tag to use...
# Maybe there is another way to not have to hardcode the value twice?
env:
  IMAGE_TAG: "20210215"
  DOCKER_CLI_EXPERIMENTAL: "enabled"

jobs:
  # Set a variable with the image manifest, if found
  check_docker_image:
    runs-on: ubuntu-latest
    outputs:
      manifest: ${{ steps.get-manifest.outputs.manifest }}
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}
      - id: get-manifest
        run: echo "::set-output name=manifest::$(docker manifest inspect ghcr.io/viroulep/btest:$IMAGE_TAG)"
  build_docker_image:
    runs-on: ubuntu-latest
    needs: check_docker_image
    # It's a bit awkward, but we need "if" on all steps: if put on the job
    # it will be skipped and "tests" will be skipped too.
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        if: needs.check_docker_image.outputs.manifest == ''
      - uses: docker/setup-qemu-action@v1
        if: needs.check_docker_image.outputs.manifest == ''
      - uses: docker/setup-buildx-action@v1
        if: needs.check_docker_image.outputs.manifest == ''
      - name: Login to GitHub Container Registry
        if: needs.check_docker_image.outputs.manifest == ''
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}
      # If manifest not found, build and publish the image.
      - name: Build and push docker image
        uses: docker/build-push-action@v2
        if: needs.check_docker_image.outputs.manifest == ''
        with:
          context: ./ci
          platforms: linux/amd64
          push: true
          tags: ghcr.io/viroulep/btest:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=ghcr.io/viroulep/btest:${{ env.IMAGE_TAG }}
          cache-to: type=inline
  tests:
    # FIXME: set HOME to the appropriate value and use cache for deps
    runs-on: ubuntu-latest
    needs: build_docker_image
    container:
      image: ghcr.io/viroulep/btest:20210215
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GH_PAT }}
    steps:
      # For some ridiculous reason the file permission are not set up
      # properly when using a custom container.
      - name: Prepare filesystem
        run: |
          sudo chown -R $(whoami):$(whoami) `pwd`
          sudo chown -R $(whoami):$(whoami) $HOME
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Run the server tests
        # FIXME: use chef actually, since we can sudo :)
        # this requires to carefully craft path in chef recipes
        run: ci/scripts/tests_server.sh
      - name: Run the client tests
        run: ci/scripts/tests_client.sh
        # FIXME: set this as an output; just do the rsync in the next step
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: tests
    container:
      image: ghcr.io/viroulep/btest:20210215
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GH_PAT }}
    env:
      # GH actions overrides this when using a custom container :(
      HOME: "/home/btest"
    steps:
      - name: Prepare filesystem
        run: sudo chown -R $(whoami):$(whoami) `pwd`
      # Checks-out the repository in $GITHUB_WORKSPACE
      - uses: actions/checkout@v2
      - name: Create ssh keys and known hosts from secrets
        run: |
          mkdir -p $HOME/.ssh
          echo "${{ secrets.CI_PRIVATE_KEY }}" >> $HOME/.ssh/id_rsa
          chmod 600 $HOME/.ssh/id_rsa
          ssh-keyscan -H quizz.virouleau.fr > $HOME/.ssh/known_hosts
      - name: Deploy client to prod
        working-directory: client
        run: yarn deploy
      - name: Run pull_deploy on server
        working-directory: server
        run: ssh btest@quizz.virouleau.fr scripts/deploy.sh pull_deploy
