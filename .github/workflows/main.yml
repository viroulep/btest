name: "CI"

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_TAG: "20210323"
  DOCKER_CLI_EXPERIMENTAL: "enabled"

jobs:
  build_docker_image:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.get-manifest.outputs.image_tag }}
    # It's a bit awkward, but we need "if" on all steps: if put on the job
    # it will be skipped and "tests" will be skipped too.
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}
      - id: get-manifest
        run: |
          echo "::set-output name=manifest::$(docker manifest inspect ghcr.io/viroulep/btest:$IMAGE_TAG)"
          echo "::set-output name=image_tag::$IMAGE_TAG"
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        if: steps.get-manifest.outputs.manifest == ''
      - uses: docker/setup-qemu-action@v1
        if: steps.get-manifest.outputs.manifest == ''
      - uses: docker/setup-buildx-action@v1
        if: steps.get-manifest.outputs.manifest == ''
      # If manifest not found, build and publish the image.
      - name: Build and push docker image
        uses: docker/build-push-action@v2
        if: steps.get-manifest.outputs.manifest == ''
        with:
          context: ./ci
          platforms: linux/amd64
          push: true
          tags: ghcr.io/viroulep/btest:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=ghcr.io/viroulep/btest:${{ env.IMAGE_TAG }}
          cache-to: type=inline
  build_and_tests:
    runs-on: ubuntu-latest
    needs: build_docker_image
    container:
      image: ghcr.io/viroulep/btest:${{ needs.build_docker_image.outputs.image_tag }}
      # Ridiculous but necessary
      options: --user 1001
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GH_PAT }}
    steps:
      # For some ridiculous reason the file permission are not set up
      # properly when using a custom container.
      - name: Prepare filesystem
        run: |
          whoami
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Since we have total control over the container image, maybe we can hardcode this
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          # Trick to allow for manual cache clear: https://github.com/actions/cache/issues/2#issuecomment-673493515
          key: ${{ env.IMAGE_TAG }}-yarn-${{ secrets.CACHE_VERSION }}-${{ hashFiles('client/yarn.lock') }}
          restore-keys: ${{ env.IMAGE_TAG }}-yarn-
      # We explicitly use manual caching, despite warnings of the action not
      # to do so.
      # The ruby version is built in the image, so we avoid basically all issues
      # that may arise by adding the image tag in the cache key.
      - uses: actions/cache@v2
        id: gems-cache
        with:
          path: server/vendor/bundle
          key: ${{ env.IMAGE_TAG }}-gems-${{ secrets.CACHE_VERSION }}-${{ hashFiles('server/Gemfile.lock') }}
          restore-keys: ${{ env.IMAGE_TAG }}-gems-
      - name: Run the client tests
        working-directory: client
        run: |
          yarn install
          yarn test
          yarn test:lint
          yarn build
          # FIXME: set this as an output; just do the rsync in the next step
          #https://github.com/actions/upload-artifact
          #https://github.com/actions/download-artifact
      - uses: actions/upload-artifact@v2
        with:
          name: client-build
          path: client/build
      - name: Run the server tests
        env:
          BUNDLE_PATH: vendor/bundle
          BUNDLE_JOBS: 3
          RAILS_ENV: test
        working-directory: server
        # FIXME: use chef actually, since we can sudo :)
        # this requires to carefully craft path in chef recipes
        run: |
          service postgresql status || sudo service postgresql start
          bundle install
          bundle exec rubocop
          bin/rails db:reset
          bin/rails test test
  deploy:
    runs-on: ubuntu-latest
    needs: [build_docker_image, build_and_tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      # Checks-out the repository in $GITHUB_WORKSPACE
      - name: Create ssh keys and known hosts from secrets
        run: |
          mkdir -p $HOME/.ssh
          echo "${{ secrets.CI_PRIVATE_KEY }}" >> $HOME/.ssh/id_rsa
          chmod 600 $HOME/.ssh/id_rsa
          ssh-keyscan -H f2l.org > $HOME/.ssh/known_hosts
      - uses: actions/download-artifact@v2
        with:
          name: client-build
          path: build
      - name: Deploy client build to server
        run: rsync -avh --delete build/ btest@f2l.org:/home/btest/btest/client/build
      - name: Run pull_deploy on server
        run: ssh btest@f2l.org btest/server/scripts/deploy.sh pull_deploy
